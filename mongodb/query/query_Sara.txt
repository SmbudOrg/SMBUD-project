1. Return title, abstract and publishing year of publications that contain "software" in their abstract.
Sort them by publishing year (desc) and then by number of pages (asc)
(create a text index for the abstract field)

db.article.aggregate(
	{"$match": {"$text": {"$search": "software"}}},
	{"$project": {"title":1, "abstract":1, "year":1, "page_number": {"$subtract": ["$pages.page_end", "$pages.page_start"]}}},
	{"$sort": {"year": -1, "page_number": 1}},
	)

2. Return title, abstract and publishing year of publications about MongoDB. 
Sort them by year (desc) and then by n_citation (desc)

db.article.aggregate([
	{$unwind: "$keywords"},
	{"$match": {"keywords": "mongodb"}},
	{"$sort": {"year": -1, "n_citation": -1}},
	{"$limit": 10},
	{"$project": {"title": 1, "abstract": 1, "year": 1, "n_citation":1}}
])

3. Find the articles published in "Encyclopedia of Parallel Computing" and return their title,
publishing year and page_start. Order them by publishing year (desc) and by page_start (asc)

db.article.find(
{"venue.raw": "Encyclopedia of Parallel Computing"},
{"title": 1, "year": 1, "page_start": 1}).sort(
{"year": -1, "page_start": 1})

4. Match works about data mining, return authors that had the highest average of n_citation

db.article.aggregate([
	{"$match": {"keywords": "data mining"}},
	{"$unwind": "$authors"},
	{"$group": {
		"_id": {"id": "$authors._id", "name": "$authors.name"},
		avg_cit: {"$avg": "$n_citation"}
		}
	},
	{"$sort": {"avg_cit": -1}},
	{"$limit": 10}
])

5. Find all works cited by publications about machine learning written by Diane Crawford

db.article.aggregate(
  {"$match": {"keywords": "machine learning", "authors.name": "Diane Crawford"}},
  {"$unwind":"$references"},
  {"$lookup":
    { 
      "from": "article",
      "localField": "references",
      "foreignField": "_id",
      "as": "doc_info"
    }},
  {"$project": {"doc_info.title":1, "doc_info.authors.name":1, "doc_info.year":1}},
  {"$sort": {"doc_info.year": -1}}
)

